#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# change focus
cmd + ctrl - h : yabai -m window --focus west
cmd + ctrl - j : yabai -m window --focus south
cmd + ctrl - k : yabai -m window --focus north
cmd + ctrl - l : yabai -m window --focus east

# back_and_forth between spaces (0x29=;)
cmd + ctrl - 0x29 : yabai -m space --focus recent

# toggle fullscreen
cmd + ctrl - f : yabai -m window --toggle zoom-fullscreen
cmd + ctrl + shift - f : yabai -m window --toggle native-fullscreen

# balance space
cmd + ctrl - s : yabai -m space --balance
cmd + ctrl - d : yabai -m window --ratio abs:0.60

# rotate windows in space
cmd + ctrl - n : yabai -m space --rotate 90
cmd + ctrl - m : yabai -m space --rotate 180

# close focused window
cmd + ctrl - w : yabai -m window --close

# focus on spaces
cmd + ctrl - y : yabai -m space --focus 1
cmd + ctrl - u : yabai -m space --focus 2
cmd + ctrl - i : yabai -m space --focus 3
cmd + ctrl - o : yabai -m space --focus 4
cmd + ctrl - p : yabai -m space --focus 5
cmd + ctrl - 0x21 : yabai -m space --focus 6
cmd + ctrl - 0x1E : yabai -m space --focus 7

# create and destroy spaces
cmd + ctrl - c : yabai -m space --create
cmd + ctrl - x : yabai -m space --destroy

# move windows to spaces
cmd + ctrl - 1 : yabai -m window --space 1
cmd + ctrl - 2 : yabai -m window --space 2
cmd + ctrl - 3 : yabai -m window --space 3
cmd + ctrl - 4 : yabai -m window --space 4
cmd + ctrl - 5 : yabai -m window --space 5
cmd + ctrl - 6 : yabai -m window --space 6

# swap windows in current workspace
cmd + alt + ctrl - h : yabai -m window --swap west || $(yabai -m window --display west; yabai -m display --focus west)
cmd + alt + ctrl - j : yabai -m window --swap south || $(yabai -m window --display south; yabai -m display --focus south)
cmd + alt + ctrl - k : yabai -m window --swap north || $(yabai -m window --display north; yabai -m display --focus north)
cmd + alt + ctrl - l : yabai -m window --swap east || $(yabai -m window --display east; yabai -m display --focus east)

# resize windows in current workspace
cmd + ctrl - left  : yabai -m window --resize left:-60:0
cmd + ctrl - right : yabai -m window --resize left:60:0
cmd + ctrl - up    : yabai -m window --resize top:0:-60
cmd + ctrl - down  : yabai -m window --resize top:0:60

# open common applications
cmd + ctrl - a : osascript -e "tell application \"Safari\"" -e "make new document at end" -e "activate" -e "end tell"
# cmd + ctrl + shift - a : osascript -e "tell application \"Arc\"" -e "make new window at end" -e "activate" -e "end tell"
cmd + ctrl - z : osascript -e "tell application \"iTerm2\"" -e "set newWindow to (create window with default profile)" -e "end tell"
